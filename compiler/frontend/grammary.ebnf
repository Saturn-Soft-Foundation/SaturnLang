code = declaration*

# declarations

declaration = function | constant | struct

function = "fn" ID "(" function_arg,* ")" ("->" type)? block
function_arg = ID ":" type

constant = "const" ID ":" type "=" expr

struct = "struct" "{" (struct_field),* "}"
struct_field = ID ":" type

# block

block = statement*

# statements

statement = 
      if_statement
    | while_statement
    | let_statement
    | expr_statement
    | return_statement
    | break_statement
    | continue_statement

if_statement = "if" expr block ("else" "if" expr block)* ("else" block)?

while_statement = "while" expr block

let_statement = "let" ("mut")? ID ("=" expr)? ";"

expr_statement = assign | expr ";"

return_statement = "return" expr? ";"

break_statement = "break" ";"

continue_statement = "continue" ";"

# expr
expr = or

assign = ID '=' or

## operators

or = 
      or '||' and
    | and

and = 
      and '&&' eq
    | eq
   
eq = 
      eq '!=' comp
    | eq '==' comp
    | comp

comp =
      comp '>=' add
    | comp '>'  add
    | comp '<=' add
    | comp '<'  add
    | add

add = 
      add '+' mul
    | add '-' mul
    | mul

mul = 
      mul '*' cast
    | mul '/' cast
    | cast

cast = 
	  cast "as" type
	| unary

unary = 
      '!' fact
    | '-' fact
    | '&' fact
    | '*' fact
    | fact

fact = literal | parenthesis | call | access

parenthesis = '(' expr ')'
call = ID '(' (expr),* ')'
access = fact '.' ID

type = ID | "*" type